generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  Workout       Workout[]
  WorkoutGoal   WorkoutGoal[]
  WorkoutTypes  WorkoutTypes[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model PassPhrase {
  value     String   @unique
  active    Boolean
  timestamp DateTime @default(now())
}

model WorkoutGoal {
  id          String    @id @default(cuid())
  userId      String
  name        String
  weightGoal  String
  bodyFatGoal String
  description String
  beginDate   DateTime  @db.Date
  endDate     DateTime  @db.Date
  Workout     Workout[]
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model Workout {
  id          String      @id @unique(map: "unique_id") @default(cuid())
  name        String?
  description String?
  sets        Int?
  reps        Int?
  duration    String?
  workoutdate DateTime    @default(now()) @db.Date
  userid      String?
  goalId      String
  WorkoutGoal WorkoutGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  User        User?       @relation(fields: [userid], references: [id], onDelete: Cascade, map: "Workout_userId_fkey")

  @@index([name], map: "Workout_name_key")
  @@index([name])
}

model WorkoutTypes {
  id     String  @id @default(cuid())
  name   String?
  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}
